name: Build Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        config:
          - { os: windows-latest, triplet: x64-windows, generator: "Visual Studio 17 2022" }
          - { os: ubuntu-latest, triplet: x64-linux, generator: "Ninja" }
    
    runs-on: ${{ matrix.config.os }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Linux Build Tools
      if: matrix.config.os == 'ubuntu-latest'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          autoconf \
          automake \
          libtool \
          pkg-config \
          gettext \  # Required for autoreconf
          libssl-dev # Additional crypto dependencies

    - name: Setup and Update vcpkg
      shell: bash
      run: |
        git clone https://github.com/microsoft/vcpkg
        cd vcpkg
        git pull origin master  # Ensure latest port versions
        echo "VCPKG_ROOT=${GITHUB_WORKSPACE}/vcpkg" >> $GITHUB_ENV

    - name: Bootstrap vcpkg
      shell: bash
      run: |
        if [ "${{ matrix.config.os }}" == "windows-latest" ]; then
          ./vcpkg/bootstrap-vcpkg.bat
        else
          ./vcpkg/bootstrap-vcpkg.sh --disableMetrics
        fi

    - name: Cache vcpkg
      uses: actions/cache@v3
      with:
        path: |
          vcpkg/installed
          vcpkg/buildtrees
        key: vcpkg-${{ matrix.config.triplet }}-${{ hashFiles('vcpkg.json') }}-${{ hashFiles('vcpkg-configuration.json') }}

    - name: Install Dependencies
      shell: bash
      run: |
        ./vcpkg/vcpkg install \
          --triplet ${{ matrix.config.triplet }} \
          --x-install-root="$VCPKG_ROOT/installed" \
          --clean-after-build

    - name: Configure CMake
      shell: bash
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" \
          -G "${{ matrix.config.generator }}" \
          $([[ "${{ matrix.config.os }}" == "windows-latest" ]] && echo "-A x64")

    - name: Build Project
      shell: bash
      run: |
        cmake --build build \
          --config Release \
          --parallel $(($(nproc) + 1))