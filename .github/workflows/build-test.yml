name: Build Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: windows-latest, compiler: msvc, triplet: x64-windows }
          - { os: ubuntu-latest, compiler: gcc, triplet: x64-linux }
    
    runs-on: ${{ matrix.config.os }}
    
    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Install System Dependencies
      shell: bash
      run: |
        if [ "${{ matrix.config.os }}" == "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build
        fi

    - uses: lukka/get-cmake@latest

    - name: Create binary cache directory
      run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
      shell: bash

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.VCPKG_ROOT }}
          !${{ env.VCPKG_ROOT }}/buildtrees
          !${{ env.VCPKG_ROOT }}/packages
          !${{ env.VCPKG_ROOT }}/downloads
          !${{ env.VCPKG_ROOT }}/installed
        key: vcpkg-${{ matrix.config.triplet }}-${{ hashFiles('vcpkg.json') }}

    - uses: ilammy/msvc-dev-cmd@v1
      if: matrix.config.os == 'windows-latest'

    - name: Cache vcpkg packages
      uses: actions/cache@v4
      with:
        path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
        key: vcpkg-packages-${{ matrix.config.triplet }}-${{ hashFiles('vcpkg.json') }}
        restore-keys: |
          vcpkg-packages-${{ matrix.config.triplet }}-

    - name: Setup vcpkg
      shell: bash
      run: |
        git clone https://github.com/microsoft/vcpkg

    - name: Configure CMake
      shell: bash
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
          -DVCPKG_TARGET_TRIPLET=${{ matrix.config.triplet }}

    - name: Build
      shell: bash
      run: |
        cmake --build build --config Release --parallel $(nproc)

    - name: Run Tests
      working-directory: build
      shell: bash
      run: ctest -C Release --output-on-failure